package com.duanrong.drpay.jsonservice.interceptor;

import base.error.ErrorCode;
import com.duanrong.drpay.jsonservice.handler.Sign;
import com.duanrong.drpay.jsonservice.handler.TerminalEnum;
import com.duanrong.drpay.jsonservice.handler.View;
import com.duanrong.util.jedis.DRJedisCacheUtil;
import org.apache.commons.lang3.StringUtils;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;
import util.FastJsonUtil;
import util.Log;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.Writer;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

/**
 * 鉴权拦截器
 *
 * @author xiao
 * @datetime 2016年10月26日 下午8:45:42
 */
public class OAuthInterceptor implements HandlerInterceptor {

    public static final String REQ_NUM = "sys_req_num";
    private static final String ENCODING = "UTF-8";
    private static final String VER = "1.0.0";
    // IP黑名单
    private static final String BLACKS_IP = "sys_req_blacks";
    @Resource
    Log log;
    // 鉴权密钥
    private String key;
    // 过期时间，请求时间距 服务器当前时间超过timeout,视为无效请求
    private long timeout;
    // 此接口无需拦截
    private String filtration;

    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public long getTimeout() {
        return timeout;
    }

    public void setTimeout(long timeout) {
        this.timeout = timeout;
    }

    public String[] getFiltration() {
        return filtration.split(",");
    }

    public void setFiltration(String filtration) {
        this.filtration = filtration;
    }

    @Override
    public void afterCompletion(HttpServletRequest arg0,
                                HttpServletResponse arg1, Object arg2, Exception arg3)
            throws Exception {

    }

    @Override
    public void postHandle(HttpServletRequest req, HttpServletResponse resp,
                           Object obj, ModelAndView mode) throws Exception {

    }

    @Override
    public boolean preHandle(HttpServletRequest req, HttpServletResponse resp,
                             Object obj) throws Exception {
        resp.setCharacterEncoding(ENCODING);
        String timestamp = req.getParameter("timestamp");
        String source = req.getParameter("source");
        String version = req.getParameter("version");
        String data = req.getParameter("data");
        String sign = req.getParameter("sign");
        View view = new View();
        view.setResponseTime(new Date());
        view.setType(TerminalEnum.app);
        view.setVersion(VER);

        // 获取请求者ip
        String ip = "";
        if (!StringUtils.isBlank(source)) {
            source = source.toLowerCase();
            if (source.contains("ios") || source.contains("android")
                    || source.contains("app")) {
                ip = getIP(req);
            } else {
                ip = req.getParameter("ip");
            }
        } else
            ip = getIP(req);
        // ip黑名单检验
        if (authenticationIP(req, ip)) {
            view.setError(ErrorCode.RequestTooMany);
            Writer write = resp.getWriter();
            write.write(FastJsonUtil.objToJsonWriteNullToEmpty(view));
            write.flush();
            write.close();
            return false;
        }

        // 接口签名鉴权
        String[] filtrations = getFiltration();
        for (String filtration : filtrations) {
            if (req.getRequestURI().contains(filtration))
                return true;
        }

        long currentimes = new Date().getTime();
        if (null == timestamp || ("").equals(timestamp)) {
            this.addBlacks(ip);
            view.setError(ErrorCode.TIMESTAMP_INVALID);
            Writer write = resp.getWriter();
            write.write(FastJsonUtil.objToJsonWriteNullToEmpty(view));
            write.flush();
            write.close();
            return false;
        } else if (Math.abs(currentimes - Long.parseLong(timestamp)) > timeout) {
            this.addBlacks(ip);
            view.setError(ErrorCode.TIMESTAMP_EXPIRE);
            Writer write = resp.getWriter();
            write.write(FastJsonUtil.objToJsonWriteNullToEmpty(view));
            write.flush();
            write.close();
            return false;
        } else if (null == version || ("").equals(version)) {
            this.addBlacks(ip);
            Writer write = resp.getWriter();
            view.setError(ErrorCode.VERSION_INVALID);
            write.write(FastJsonUtil.objToJsonWriteNullToEmpty(view));
            write.flush();
            write.close();
            return false;
        } else if (null == sign || ("").equals(sign)) {
            this.addBlacks(ip);
            Writer write = resp.getWriter();
            view.setError(ErrorCode.SIGN_INVALID);
            write.write(FastJsonUtil.objToJsonWriteNullToEmpty(view));
            write.flush();
            write.close();
            return false;
        } else {
            String str = timestamp + "|" + source + "|" + version;
            if (data != null)
                str += "|" + data;
            if (sign.equals(Sign.sign(str, key))) {
                return true;
            } else {
                this.addBlacks(ip);
                Writer write = resp.getWriter();
                view.setError(ErrorCode.SIGN_INVALID);
                write.write(FastJsonUtil.objToJsonWriteNullToEmpty(view));
                write.flush();
                write.close();
                return false;
            }
        }
    }

    /**
     * ip给名单校验
     *
     * @param request
     * @return
     */
    private boolean authenticationIP(HttpServletRequest request, String ip) {
        try {
            if (!StringUtils.isBlank(ip)
                    && DRJedisCacheUtil.sexists(BLACKS_IP, ip)) {
                Enumeration<String> enu = request.getParameterNames();
                StringBuffer buf = new StringBuffer();
                if (null != enu) {
                    while (enu.hasMoreElements()) {
                        String paraName = enu.nextElement();
                        buf.append(paraName + "="
                                + request.getParameter(paraName) + ";");
                    }
                }
                log.errLog("请求拦截", "requestIP: " + ip
                        + ", 已添加黑名单, requestURL: " + request.getRequestURL()
                        + ", params: " + buf);
                return true;
            }
            return false;
        } catch (Exception e) {
            return true;
        }
    }

    // 获取请求ip
    private String getIP(HttpServletRequest request) {
        String ip = request.getHeader("x-forwarded-for");
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("Proxy-Client-IP");
        }
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("WL-Proxy-Client-IP");
        }
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getRemoteAddr();
            if (ip.equals("127.0.0.1") || ip.contains("192.168.1")) {
                // 根据网卡取本机配置的IP
                InetAddress inet = null;
                try {
                    inet = InetAddress.getLocalHost();
                } catch (UnknownHostException e) {
                    e.printStackTrace();
                }
                ip = inet.getHostAddress();
            }
        }
        // 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割
        if (ip != null && ip.length() > 15) {
            if (ip.indexOf(",") > 0)
                ip = ip.substring(0, ip.indexOf(","));
        }
        return ip;
    }

    /**
     * 添加黑名单
     *
     * @param ip
     */
    private void addBlacks(String ip) {
        try {
            if (!StringUtils.isBlank(ip)) {
                ThreadLocal<Integer> ipCount = new ThreadLocal<>();
                ipCount.set((Integer) DRJedisCacheUtil.hget(REQ_NUM,
                        Integer.class, ip).get(ip));
                ipCount.set(ipCount.get() == null ? 1 : ipCount.get() + 1);
                Map<String, String> hash = new HashMap<>();
                hash.put(ip, "" + ipCount.get());
                if (DRJedisCacheUtil.exists(REQ_NUM))
                    DRJedisCacheUtil.hsetstr(REQ_NUM, hash);
                else
                    DRJedisCacheUtil.hsetstr(REQ_NUM, 86400, hash);
                if (ipCount.get() >= 100)
                    DRJedisCacheUtil.sadd(BLACKS_IP, ip);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}