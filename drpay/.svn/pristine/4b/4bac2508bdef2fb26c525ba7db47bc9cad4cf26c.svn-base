package com.duanrong.drpay.trusteeship.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.springframework.stereotype.Service;

import util.ArithUtil;
import util.DateUtil;
import util.Log;
import util.SmsHttpClient;
import base.error.ErrorCode;
import base.exception.DataAlreadExistException;
import base.exception.PlatformAccountException;
import base.exception.TradeException;
import base.exception.UserAccountException;
import base.exception.UserInfoException;

import com.duanrong.drpay.business.account.PlatformAccountEnum;
import com.duanrong.drpay.business.account.service.PlatformAccountService;
import com.duanrong.drpay.business.account.service.UserAccountService;
import com.duanrong.drpay.business.platformtransfer.model.PlatformTransfer;
import com.duanrong.drpay.business.platformtransfer.service.PlatformTransferService;
import com.duanrong.drpay.business.transaction.model.TransactionAuthorization;
import com.duanrong.drpay.business.transaction.service.GeneralTransactionService;
import com.duanrong.drpay.business.user.model.User;
import com.duanrong.drpay.business.user.service.UserService;
import com.duanrong.drpay.config.BusinessEnum;
import com.duanrong.drpay.jsonservice.handler.TerminalEnum;
import com.duanrong.drpay.trusteeship.constants.TrusteeshipServer;
import com.duanrong.drpay.trusteeship.helper.model.BizType;
import com.duanrong.drpay.trusteeship.helper.model.Generator;
import com.duanrong.drpay.trusteeship.helper.model.GeneratorDetailJSON;
import com.duanrong.drpay.trusteeship.helper.model.GeneratorJSON;
import com.duanrong.drpay.trusteeship.helper.model.GeneratorPreTransactionJSON;
import com.duanrong.drpay.trusteeship.helper.model.NotifyURL;
import com.duanrong.drpay.trusteeship.helper.model.PlatformType;
import com.duanrong.drpay.trusteeship.helper.service.TrusteeshipService;
import com.duanrong.drpay.trusteeship.service.TrusteeshipFundTransferService;
import com.duanrong.util.jedis.DRJedisDLock;

@Service
public class TrusteeshipFundTransferServiceImpl implements
		TrusteeshipFundTransferService {

	@Resource
	UserAccountService userAccountService;

	@Resource
	PlatformAccountService platformAccountService;

	@Resource
	UserService userService;

	@Resource
	TrusteeshipService trusteeshipService;

	@Resource
	PlatformTransferService platformTransferService;

	@Resource
	GeneralTransactionService generalTransactionService;

	@Resource
	SmsHttpClient smsHttpClient;

	@Resource
	Log log;

	private static final String REWARD_LOCK = "reward";

	@Override
	public String sendRewardDirect(String userId, String requestNo,
			double rewardMoney, BusinessEnum businessType, String loanId,
			String title, String remarks) throws DataAlreadExistException,
			UserAccountException, PlatformAccountException {
		if (DRJedisDLock.getDLock(REWARD_LOCK + requestNo, requestNo)) {
			try {
				// 保存平台划款数据
				businessType = businessType == null ? BusinessEnum.reward
						: businessType;
				title = StringUtils.isBlank(title) ? "平台奖励" : title;
				PlatformTransfer platformTransfer = new PlatformTransfer();
				try {
					platformTransfer = platformTransferService.prepare(
							requestNo, userId, rewardMoney,
							businessType.toString(), loanId, remarks);
					// 冻结本地营销账户
					platformAccountService.freeze(
							PlatformAccountEnum.PLATFORM_MARKETING,
							rewardMoney, businessType, title, requestNo);
				} catch (Exception e) {
					platformTransfer.setStatus("平台划款失败");
					platformTransferService.update(platformTransfer);
					log.errLog("平台奖励发送失败", "userId: " + userId
							+ ", rewardType: " + businessType.toString()
							+ ", 奖励名称: " + title + ", requestNo: " + requestNo
							+ "发送失败, 请及时处理\n" + ExceptionUtils.getMessage(e), 1);
					throw e;
				}
				GeneratorPreTransactionJSON json = new GeneratorPreTransactionJSON();
				json.setRequestNo("PRET"+requestNo);// 预处理流水号固定是业务流水号+前缀PRET
				json.setPlatformUserNo(PlatformType.SYS_GENERATE_002.name());
				json.setBizType(BizType.MARKETING);
				json.setAmount(rewardMoney);
				Generator generator = trusteeshipService.execute(json,
						TrusteeshipServer.PLATFORM_PRE_TRANSACTION,
						GeneratorJSON.class, BusinessEnum.reward);
				if (generator != null && generator.getRespData() != null) {
					GeneratorJSON generatorJson = generator.getRespData();
					if (generatorJson.getCode().equals("0")) {
						if (sendRewardConfirm(platformTransfer, title)) {
							return "success";
						}
						return "sended";
					} else {
						platformAccountService.unfreeze(
								PlatformAccountEnum.PLATFORM_MARKETING,
								rewardMoney, businessType, title, requestNo);
						platformTransfer.setStatus("平台划款失败: "
								+ generatorJson.getDescription());
						platformTransferService.update(platformTransfer);
						log.errLog("平台奖励发送失败", "userId: " + userId
								+ ", rewardType: " + businessType.toString()
								+ ", 奖励名称: " + title + ", requestNo: "
								+ requestNo + "发送失败, 请及时处理\n 平台预处理返回"
								+ generatorJson.getDescription(), 1);
					}
				} else {
					platformAccountService.unfreeze(
							PlatformAccountEnum.PLATFORM_MARKETING,
							rewardMoney, businessType, title, requestNo);
					platformTransfer.setStatus("平台划款失败");
					platformTransferService.update(platformTransfer);
					log.errLog("平台奖励发送失败", "userId: " + userId
							+ ", rewardType: " + businessType.toString()
							+ ", 奖励名称: " + title + ", requestNo: " + requestNo
							+ "发送失败, 请及时处理\n 平台预处理返回null", 1);
				}
			} catch (Exception e) {
				log.errLog("平台奖励发送失败", "userId: " + userId + ", rewardType: "
						+ businessType.toString() + ", 奖励名称: " + title
						+ ", requestNo: " + requestNo + "发送失败, 请及时处理\n"
						+ ExceptionUtils.getMessage(e), 1);
				throw e;
			} finally {
				DRJedisDLock.releaseDLock(REWARD_LOCK + requestNo, requestNo);
			}
		}
		return "fail";
	}

	//废弃不用，直接调用sendRewardDirect
	@Deprecated
	@Override
	public String sendRewardPrepare(String requestNo, double rewardMoney,
			BusinessEnum businessType, String loanId, String title,
			String remarks) throws DataAlreadExistException,
			UserAccountException, PlatformAccountException {
		if (DRJedisDLock.getDLock(REWARD_LOCK + requestNo, requestNo)) {
			try {
				// 保存平台划款数据
				businessType = businessType == null ? BusinessEnum.reward
						: businessType;
				title = StringUtils.isBlank(title) ? "平台奖励" : title;
				PlatformTransfer platformTransfer = new PlatformTransfer();
				if (businessType == BusinessEnum.demand_out) {
					// 冻结本地营销账户
					platformAccountService.freeze(
							PlatformAccountEnum.PLATFORM_MARKETING,
							rewardMoney, businessType, title, requestNo);
				} else {
					try {
						platformTransfer = platformTransferService.prepare(
								requestNo, "", rewardMoney,
								businessType.toString(), loanId, remarks);
						// 冻结本地营销账户
						platformAccountService.freeze(
								PlatformAccountEnum.PLATFORM_MARKETING,
								rewardMoney, businessType, title, requestNo);
					} catch (Exception e) {
						platformTransfer.setStatus("平台划款失败");
						platformTransferService.update(platformTransfer);
						log.errLog("平台奖励发送失败",
								", rewardType: " + businessType.toString()
										+ ", 奖励名称: " + title + ", requestNo: "
										+ requestNo + "发送失败, 请及时处理\n"
										+ ExceptionUtils.getMessage(e), 1);
						throw e;
					}
				}
				GeneratorPreTransactionJSON json = new GeneratorPreTransactionJSON();
				json.setRequestNo(requestNo);
				json.setPlatformUserNo(PlatformType.SYS_GENERATE_002.name());
				json.setBizType(BizType.MARKETING);
				json.setAmount(rewardMoney);
				Generator generator = trusteeshipService.execute(json,
						TrusteeshipServer.PLATFORM_PRE_TRANSACTION,
						GeneratorJSON.class, BusinessEnum.reward);
				if (generator != null && generator.getRespData() != null) {
					GeneratorJSON generatorJson = generator.getRespData();
					if (generatorJson.getCode().equals("0")) {
						return "sended";
					} else {
						platformAccountService.unfreeze(
								PlatformAccountEnum.PLATFORM_MARKETING,
								rewardMoney, businessType, title, requestNo);
						if (businessType != BusinessEnum.demand_out) {
							platformTransfer.setStatus("平台划款失败: "
									+ generatorJson.getDescription());
							platformTransferService.update(platformTransfer);
						}
						log.errLog("平台奖励预处理失败",
								"rewardType: " + businessType.toString()
										+ ", 奖励名称: " + title + ", requestNo: "
										+ requestNo + "发送失败, 请及时处理\n 平台预处理返回"
										+ generatorJson.getDescription(), 1);
					}
				} else {
					platformAccountService.unfreeze(
							PlatformAccountEnum.PLATFORM_MARKETING,
							rewardMoney, businessType, title, requestNo);
					if (businessType != BusinessEnum.demand_out) {
						platformTransfer.setStatus("平台划款失败");
						platformTransferService.update(platformTransfer);
					}
					log.errLog("平台奖励预处理失败",
							"rewardType: " + businessType.toString()

							+ ", 奖励名称: " + title + ", requestNo: " + requestNo
									+ "发送失败, 请及时处理\n 平台预处理返回null", 1);
				}
			} catch (Exception e) {
				log.errLog(
						"平台奖励预处理失败",
						"rewardType: " + businessType.toString() + ", 奖励名称: "
								+ title + ", requestNo: " + requestNo
								+ "发送失败, 请及时处理\n"
								+ ExceptionUtils.getMessage(e), 1);
				throw e;
			} finally {
				DRJedisDLock.releaseDLock(REWARD_LOCK + requestNo, requestNo);
			}
		}
		return "fail";

	}

	@Override
	public String sendRewardConfirm(String userId, double money,
			String requestNo, String preTransactionNo, String info, BusinessEnum businessType)
			throws DataAlreadExistException, UserAccountException,
			PlatformAccountException, TradeException {
		PlatformTransfer platformTransfer = new PlatformTransfer();
		platformTransfer.setOrderId(requestNo);
		platformTransfer.setStatus("'等待平台划款'");
		List<PlatformTransfer> pransfers = platformTransferService
				.getPlatformTransfer(platformTransfer);
		if (pransfers.isEmpty()) {
			throw new TradeException(ErrorCode.RewardNoFind);
		}
		platformTransfer = pransfers.get(0);
		if (sendRewardConfirm(platformTransfer, info)) {
			return "success";
		}
		return "fail";
	}

	private boolean sendRewardConfirm(PlatformTransfer platformTransfer,
			String title) throws UserAccountException, PlatformAccountException {
		GeneratorPreTransactionJSON json = new GeneratorPreTransactionJSON();
		// 活期宝调用这个方法，传入transferOutId 流水号应该是从数据库中读取，保证幂等
		json.setRequestNo(platformTransfer.getOrderId());
		json.setPreTransactionNo("PRET"+platformTransfer.getOrderId());
		List<GeneratorDetailJSON> details = new ArrayList<>(1);
		GeneratorDetailJSON generatorDetailJSON = new GeneratorDetailJSON();
		generatorDetailJSON.setAmount(platformTransfer.getActualMoney());
		generatorDetailJSON.setPlatformUserNo(platformTransfer.getUsername());
		details.add(generatorDetailJSON);
		json.setDetails(details);
		Generator generator = trusteeshipService.execute(json,
				TrusteeshipServer.CONFIRM_PLATFORM_MARKETING,
				GeneratorJSON.class, BusinessEnum.reward_confirm);
		if (generator != null && generator.getRespData() != null) {
			GeneratorJSON generatorJson = generator.getRespData();
			if (generatorJson.getCode().equals("0")) {
				double rewardMoney = ArithUtil.round(
						platformTransfer.getActualMoney(), 2);
				platformTransfer.setStatus("平台划款成功");
				platformTransferService.update(platformTransfer);

				// 转出营销款
				platformAccountService.tofreeze(
						PlatformAccountEnum.PLATFORM_MARKETING, rewardMoney,
						BusinessEnum.valueOf(platformTransfer.getType()),
						title, platformTransfer.getOrderId());
				// 发奖励
				try {
					userAccountService.ptTransferIn(
							platformTransfer.getUsername(), rewardMoney,
							BusinessEnum.valueOf(platformTransfer.getType()),
							title, platformTransfer.getRemarks(),
							platformTransfer.getOrderId());
					return true;
				} catch (Exception e) {
					log.errLog(
							"平台奖励发送失败",
							"userId: " + platformTransfer.getUsername()
									+ ", rewardType: "
									+ platformTransfer.getType() + ", 奖励名称: "
									+ title + ", requestNo: "
									+ platformTransfer.getOrderId()
									+ "发送失败, 请及时处理, 平台营销款确认失败\n"
									+ ExceptionUtils.getMessage(e), 1);
					throw e;
				}

			} else {
				log.errLog(
						"平台奖励发送失败",
						"userId: " + platformTransfer.getUsername()
								+ ", rewardType: " + platformTransfer.getType()
								+ ", 奖励名称: " + title + ", requestNo: "
								+ platformTransfer.getOrderId()
								+ "发送失败, 请及时处理\n 平台营销款确认返回"
								+ generatorJson.getDescription(), 1);
			}
		} else {
			log.errLog("平台奖励发送失败",
					"userId: " + platformTransfer.getUsername()
							+ ", rewardType: " + platformTransfer.getType()
							+ ", 奖励名称: " + title + ", requestNo: "
							+ platformTransfer.getOrderId()
							+ "发送失败, 请及时处理\n 平台营销款确认返回null", 1);
		}
		return false;
	}

	/**
	 * 验密扣费
	 * 
	 * @param requestNo
	 * @param userId
	 * @param money
	 * @param plafromAccountType
	 * @param descripion
	 * @param terminalType
	 * @return
	 */
	private Generator createDeduct(String requestNo, String userId,
			double money, PlatformAccountEnum plafromAccountType,
			String descripion, TerminalEnum terminalType) {
		GeneratorPreTransactionJSON json = new GeneratorPreTransactionJSON();
		json.setRequestNo(requestNo);
		json.setPlatformUserNo(userId);
		json.setAmount(money);
		if (plafromAccountType == null)
			plafromAccountType = PlatformAccountEnum.PLATFORM_SYS;
		json.setTargetPlatformUserNo(plafromAccountType.name());
		json.setCustomDefine(descripion);
		json.setExpired(DateUtil.addMinute(new Date(), 5));
		json.setCallbackUrl(NotifyURL.TSCA);
		return trusteeshipService.create(json, TrusteeshipServer.VERIFY_DEDUCT,
				BusinessEnum.transfer);
	}

	@Override
	public Generator createTransaction(String userId, String targetMobile,
			double money, String descripion, TerminalEnum terminalType)
			throws UserInfoException, UserAccountException {
		User user = userService.getUserByMobileNumber(targetMobile);
		if (user == null)
			throw new UserInfoException(ErrorCode.TargetUserNotFind);
		if (userService.hasRoleByUserId(user.getUserId(), "INVESTOR")) {
			log.errLog("通用转账失败", "只能转账给普通用户, userId: " + user.getUserId());
			throw new UserInfoException(ErrorCode.TargetUserNotInvestor);
		}
		// 开始转账
		TransactionAuthorization transaction = generalTransactionService
				.prepare(userId, user.getUserId(), money);
		// 冻结金额
		userAccountService
				.freeze(userId, money, BusinessEnum.transfer, "转账：冻结金额", "向用户"
						+ user.getUserId() + "转账", transaction.getId());

		GeneratorPreTransactionJSON json = new GeneratorPreTransactionJSON();
		json.setRequestNo(invest.getId());
		json.setBizType(BizType.TENDER);
		json.setCallbackUrl(NotifyURL.INVE);
		json.setPlatformUserNo(invest.getInvestUserID());
		json.setAmount(invest.getMoney());
		json.setProjectNo(invest.getLoanId());
		json.setExpired(DateUtil.addMinute(invest.getTime(), 5));
		json.setRemark("手动投标");
		json.setSource(terminalType);
		return trusteeshipService.create(json,
				TrusteeshipServer.USER_PRE_TRANSACTION, BusinessEnum.invest);
		
		return null;
	}
}
