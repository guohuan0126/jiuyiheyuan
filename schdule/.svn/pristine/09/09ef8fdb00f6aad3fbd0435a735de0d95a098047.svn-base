package com.duanrong.business.account.service.impl;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import base.exception.InsufficientBalance;
import base.exception.OutOfDateException;
import base.pagehelper.PageInfo;

import com.duanrong.business.account.AccountEnum;
import com.duanrong.business.account.BusinessEnum;
import com.duanrong.business.account.PaymentEnum;
import com.duanrong.business.account.dao.PaymentAccountDao;
import com.duanrong.business.account.model.PaymentAccount;
import com.duanrong.business.account.model.PaymentBill;
import com.duanrong.business.account.service.PaymentAccountService;
import com.duanrong.util.jedis.DRJedisDLock;

@Service
public class PaymentAccountServiceImpl implements PaymentAccountService {

	@Resource
	PaymentAccountDao paymentAccountDao;

	private static final String PAYMENT_ACCOUNT_DLOCK = "payment_account";

	/**
	 * 第三方入账
	 * 
	 * @param pamenyId
	 *            支付机构
	 * @param money
	 *            入账金额
	 * @param businessType
	 *            业务类型
	 * @param typeInfo
	 *            描述
	 * @param requestNo
	 *            流水号
	 */
	@Override
	public void transferIn(PaymentEnum pamenyId, double money,
			BusinessEnum businessType, String typeInfo, String requestNo) {
		if (DRJedisDLock.getDLock(PAYMENT_ACCOUNT_DLOCK + pamenyId, requestNo)) {
			try {
				PaymentAccount accountOld = paymentAccountDao
						.getPaymentAccountByPaymentId(pamenyId.toString());
				PaymentAccount accountNew = new PaymentAccount();
				accountNew.setId(accountOld.getId());
				accountNew.setBalance(accountOld.getBalance() + money);
				accountNew.setAvailableBalance(accountOld.getAvailableBalance()
						+ money);
				accountNew.setChannel(pamenyId.toString());
				accountNew.setFreezeAmount(accountOld.getFreezeAmount());
				accountNew.setTime(new Date());
				paymentAccountDao.update(accountNew);
				PaymentBill paymentBill = new PaymentBill();
				paymentBill.setChannel(pamenyId.toString());
				paymentBill.setBalance(accountOld.getBalance() + money);
				paymentBill.setMoney(money);
				paymentBill.setRequestNo(requestNo);
				paymentBill.setBusinessType(businessType.toString());
				paymentBill.setType(AccountEnum.ti_balance.toString());
				paymentBill.setTypeInfo(typeInfo);
				paymentBill.setFreezeAmount(accountOld.getFreezeAmount());
				paymentAccountDao.insert(paymentBill);
			} catch (Exception e) {
				throw e;
			} finally {
				DRJedisDLock.releaseDLock(PAYMENT_ACCOUNT_DLOCK + pamenyId,
						requestNo);
			}
		}
	}

	/**
	 * 第三方出账
	 * 
	 * @param pamenyId
	 *            支付机构
	 * @param money
	 *            出账金额
	 * @param businessType
	 *            业务类型
	 * @param typeInfo
	 *            描述
	 * @param requestNo
	 *            流水号
	 * @throws InsufficientBalance
	 */
	@Override
	public void transferOut(PaymentEnum pamenyId, double money,
			BusinessEnum businessType, String typeInfo, String requestNo)
			throws InsufficientBalance {
		if (DRJedisDLock.getDLock(PAYMENT_ACCOUNT_DLOCK + pamenyId, requestNo)) {
			try {
				PaymentAccount accountOld = paymentAccountDao
						.getPaymentAccountByPaymentId(pamenyId.toString());
				if (accountOld.getAvailableBalance() < money) {
					throw new InsufficientBalance("账户余额不足！");
				}
				PaymentAccount accountNew = new PaymentAccount();
				accountNew.setId(accountOld.getId());
				accountNew.setAvailableBalance(accountOld.getAvailableBalance()
						- money);
				accountNew.setBalance(accountOld.getBalance() - money);
				accountNew.setChannel(pamenyId.toString());
				accountNew.setTime(new Date());
				accountNew.setFreezeAmount(accountOld.getFreezeAmount());
				paymentAccountDao.update(accountNew);
				PaymentBill paymentBill = new PaymentBill();
				paymentBill.setBalance(accountOld.getBalance() - money);
				paymentBill.setChannel(pamenyId.toString());
				paymentBill.setMoney(money);
				paymentBill.setRequestNo(requestNo);
				paymentBill.setBusinessType(businessType.toString());
				paymentBill.setType(AccountEnum.to_balance.toString());
				paymentBill.setTypeInfo(typeInfo);
				paymentBill.setFreezeAmount(accountOld.getFreezeAmount());
				paymentAccountDao.insert(paymentBill);
			} catch (Exception e) {
				throw e;
			} finally {
				DRJedisDLock.releaseDLock(PAYMENT_ACCOUNT_DLOCK + pamenyId,
						requestNo);
			}
		}
	}

	/**
	 * 第三方账户信息
	 * 
	 * @return
	 */
	@Override
	public List<PaymentAccount> getPaymentAccount() {
		return paymentAccountDao.getPaymentAccount();
	}

	/**
	 * 第三方账户流水
	 * 
	 * @param pageNo
	 * @param pageSize
	 * @param paymentBill
	 * @return
	 * @throws OutOfDateException
	 */
	@Override
	public PageInfo<PaymentBill> pageLite(int pageNo, int pageSize,
			PaymentBill paymentBill) {
		return null;
	}

}
