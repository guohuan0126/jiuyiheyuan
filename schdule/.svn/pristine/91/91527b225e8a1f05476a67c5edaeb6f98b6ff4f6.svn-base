package com.duanrong.business.recharge.service.impl;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import util.Log;
import util.MyStringUtils;
import base.model.PageData;
import base.pagehelper.PageInfo;

import com.duanrong.business.recharge.dao.RechargeDao;
import com.duanrong.business.recharge.model.Recharge;
import com.duanrong.business.recharge.service.RechargeService;
import com.duanrong.business.risk.service.SystemBillService;
import com.duanrong.business.user.UserConstants;
import com.duanrong.business.user.service.UserMoneyService;
import com.duanrong.util.ArithUtil;

@Service
public class RechargeServiceImpl implements RechargeService {

	private final Lock lock = new ReentrantLock();

	@Resource
	RechargeDao rechargeDao;

	@Resource
	UserMoneyService userMoneyService;

	@Resource
	SystemBillService systemBillService;

	@Resource
	Log log;

	@Override
	public List<Recharge> getByCondition(Recharge recharge) {
		return rechargeDao.getByCondition(recharge);
	}

	@Override
	public Double getTotalRecharge(Recharge recharge) {
		Double d=0d;
		d= rechargeDao.getTotalRecharge(recharge);
		if( d!=null) return d ; 
		else return (double) 0;
	}

	@Override
	public PageData<Recharge> findPaging(int pageNo, int pageSize,
			Recharge recharge) {
		return rechargeDao.findPaging(pageNo, pageSize, recharge);
	}

	@Override
	public Long getRechargeCount(Recharge recharge) {
		return rechargeDao.getCount(recharge);
	}

	@Override
	public void insert(Recharge recharge) {
		rechargeDao.insert(recharge);
	}

	@Override
	public Recharge get(String id) {
		return rechargeDao.get(id);
	}

	@Override
	public void rechargeSuccess(String rechargeId) {
		lock.lock();
		try {
			Recharge recharge = get(rechargeId);
			if (StringUtils.equals(recharge.getStatus(),
					UserConstants.RechargeStatus.WAIT_PAY)) {
				// 修改状态为成功
				recharge.setStatus(UserConstants.RechargeStatus.SUCCESS);
				// 设置充值成功时间
				recharge.setSuccessTime(new Date());
				// 更新
				rechargeDao.update(recharge);

				String userId = recharge.getUserId();
				Double money = recharge.getActualMoney();
				String operatorInfo = "充值";
				// 往user_bill表中插入值并计算余额
				userMoneyService.transferIntoBalance(userId, money,
						operatorInfo, null);

				// 系统账户
				// 系统账户金额操作不能影响用户的账户
				try {
					String rechargeWay = recharge.getRechargeWay();
					double systemMoney = 0;
					if (MyStringUtils.equalsIgnoreCaseAnyString(rechargeWay,
							"pc", null)) {
						systemMoney = ArithUtil.round(
								recharge.getActualMoney() * 0.002, 2);
					} else {
						systemMoney = ArithUtil.round(
								recharge.getActualMoney() * 0.003, 2);
					}
					String detail = MyStringUtils.append("用户ID：", userId,
							"，充值ID：", rechargeId);
					systemBillService.transferOut(systemMoney, "充值手续费", detail);
				} catch (Exception ex) {
					log.errLog("充值，系统账户操作", ex);
				}
			}
		} catch (Exception e) {
			log.errLog("处理充值成功", e);
		} finally {
			lock.unlock();
		}

	}

	
	@Override
	public void rechargeSuccess(String rechargeId,String type) {
		synchronized (RechargeServiceImpl.class) {
			try {
				Recharge recharge = get(rechargeId);
				if (StringUtils.equals(recharge.getStatus(),
						UserConstants.RechargeStatus.WAIT_PAY)) {
					// 修改状态为成功
					recharge.setStatus(UserConstants.RechargeStatus.SUCCESS);
					// 设置充值成功时间
					recharge.setSuccessTime(new Date());
					//充值方式
					recharge.setType(type);
					String userId = recharge.getUserId();
					Double money = recharge.getActualMoney();
					String operatorInfo = "充值成功";
					// 往user_bill表中插入值并计算余额
					userMoneyService.transferIntoBalance(userId, money, operatorInfo, operatorInfo);
					// 更新recharge表，放在user_bill插入操作之后，以免出现事物不同步的问题
					rechargeDao.update(recharge);

					// 系统账户
					// 系统账户金额操作不能影响用户的账户
					try {
						String rechargeWay = recharge.getRechargeWay();
						double systemMoney = 0;
						if (MyStringUtils.equalsIgnoreCaseAnyString(
								rechargeWay, "pc", null)) {
							systemMoney = ArithUtil.round(
									recharge.getActualMoney() * 0.002, 2);
						} else {
							systemMoney = ArithUtil.round(
									recharge.getActualMoney() * 0.003, 2);
						}
						String detail = MyStringUtils.append("用户ID：", userId,
								"，充值ID：", rechargeId);
						systemBillService.transferOut(systemMoney, "充值手续费",
								detail);
					} catch (Exception ex) {
						log.errLog("充值，系统账户操作", ex);
					}
				}
			} catch (Exception ex) {
				log.errLog("处理充值失败", ex);
				throw ex;
			}
		}
	}
	
	@Override
	public void update(Recharge recharge) {
		rechargeDao.update(recharge);
	}

	@Override
	public PageInfo<Recharge> getAllRecharge(int pageNo, int pageSize,
			Recharge recharge) {
		return rechargeDao.pageLite(pageNo, pageSize, recharge);
	}

	@Override
	public Double getTotalFee(Recharge recharge) {
		Double d=0d;
		d= rechargeDao.getTotalFee(recharge);
		if( d!=null) return d ; 
		else return (double) 0;
	}

	@Override
	public double getRechargeMoneyPerDay(Map<String, Object> params) {
		return rechargeDao.getRechargeMoneyPerDay(params);
	}

	@Override
	public List<Recharge> getRechargeNum(Map map) {
		return rechargeDao.getRechargeNum(map);
	}

	@Override
	public void save(Recharge recharge) {
		rechargeDao.save(recharge);
	}
}