package com.duanrong.business.loan.service.impl;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.lang.math.NumberUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import util.Log;
import util.OssUtil;
import base.exception.InvestMoneyException;
import base.exception.NoMatchingObjectsException;
import base.model.PageData;
import base.pagehelper.PageInfo;
import com.duanrong.business.invest.InvestConstants;
import com.duanrong.business.invest.dao.InvestDao;
import com.duanrong.business.invest.model.Invest;
import com.duanrong.business.loan.LoanConstants;
import com.duanrong.business.loan.dao.ApplyEnterpriseLoanDao;
import com.duanrong.business.loan.dao.LoanDao;
import com.duanrong.business.loan.model.ApplyEnterpriseLoan;
import com.duanrong.business.loan.model.BannerPicture;
import com.duanrong.business.loan.model.Enterprise;
import com.duanrong.business.loan.model.FixedBorrowers;
import com.duanrong.business.loan.model.House;
import com.duanrong.business.loan.model.Loan;
import com.duanrong.business.loan.model.LoanProgress;
import com.duanrong.business.loan.model.Vehicle;
import com.duanrong.business.loan.service.LoanDetailService;
import com.duanrong.business.loan.service.LoanService;
import com.duanrong.business.repay.dao.RepayDao;
import com.duanrong.business.repay.service.RepayService;
import com.duanrong.business.risk.service.SystemBillService;
import com.duanrong.business.sms.service.SmsService;
import com.duanrong.business.system.service.OperaRecordService;
import com.duanrong.business.trusteeship.model.TrusteeshipConstants;
import com.duanrong.business.trusteeship.model.TrusteeshipOperation;
import com.duanrong.business.trusteeship.model.TrusteeshipYeepayConstants;
import com.duanrong.business.trusteeship.service.TrusteeshipOperationService;
import com.duanrong.business.user.dao.UserDao;
import com.duanrong.business.user.model.User;
import com.duanrong.business.user.service.InformationService;
import com.duanrong.business.user.service.UserMoneyService;
import com.duanrong.newadmin.utility.ArithUtil;
import com.duanrong.newadmin.utility.Dom4jUtil;
import com.duanrong.newadmin.utility.IdGenerator;
import com.duanrong.util.LoadConstantProterties2;
import com.duanrong.yeepaysign.CFCASignUtil;

/**
 * 
 * Copyright : duanrong.com.cn All Rights Reserved Company : 久亿财富（北京）投资有限公司
 * 
 * @Author : 孙铮
 * @CreateTime : 2015-3-11 下午2:03:03
 * @Description : NewAdmin com.duanrong.business.loan.service.impl
 *              LoanServiceImpl.java
 * 
 */
@Service("loanService")
public class LoanServiceImpl implements LoanService {
	
	@Resource
	LoanDao loanDao;

	@Resource
	InvestDao investDao;

	@Resource
	RepayService repayService;

	@Resource
	SmsService smsService;

	@Resource
	RepayDao repayDao;

	@Resource
	LoanDetailService loanDetailService;

	@Resource
	SystemBillService systemBillService;

	@Resource
	TrusteeshipOperationService trusteeshipOperationService;

	@Resource
	InformationService informationService;

	@Resource
	ApplyEnterpriseLoanDao applyEnterpriseLoanDao;

	@Resource
	UserDao userDao;

	@Resource
	UserMoneyService userMoneyService;

	@Resource
	Log log;

	@Resource
	OperaRecordService operaRecordService;


	/**
	 * 
	 * @description 查询所有借款记录
	 * @author 孙铮
	 * @time 2014-8-28 下午12:36:56
	 * @param loan
	 * @return
	 */
	public List<Loan> findAll() {
		List<Loan> loans = loanDao.findAll();
		return loans;
	}

	/**
	 * 
	 * @description 根据id查询单条借款记录
	 * @author 孙铮
	 * @time 2014-8-28 下午12:37:14
	 * @param id
	 * @return
	 */
	public Loan get(String id) {
		Loan loan = loanDao.get(id);
		return loan;
	}

	/**
	 * 
	 * @description 根据组合条件查询所有借款记录
	 * @author 孙铮
	 * @time 2014-8-28 下午5:29:29
	 * @param userID
	 * @return
	 */
	public List<Loan> getLoansByGroupCondition(Loan loan) {
		if (loan == null) {
			return null;
		} else {
			List<Loan> loans = loanDao.getLoansByGroupCondition(loan);
			return loans;
		}
	}

	/**
	 * 
	 * @description 根据组合条件查询所有借款记录
	 * @author xiao
	 * @time 2014-8-28 下午5:29:29
	 * @param userID
	 * @return
	 */
	public List<Loan> getLoansByGroupCondition1(Map<String, Object> map) {

		return loanDao.getLoansByGroupCondition1(map);

	}

	/**
	 * 
	 * @description 根据loanID查询对应借款人信息
	 * @author 孙铮
	 * @time 2014-8-28 下午5:40:44
	 * @param loanID
	 * @return
	 */
	public User getUserByLoanID(String loanID) {
		User user = loanDao.getUserByLoanID(loanID);
		return user;
	}

	/**
	 * 
	 * @description 根据loanID获取项目图片资料
	 * @author 孙铮
	 * @time 2014-8-30 上午10:51:37
	 * @param loanID
	 * @return
	 */
	public List<BannerPicture> getLoanInfoPics(String loanID) {
		List<BannerPicture> loanInfoPics = loanDao.getLoanInfoPics(loanID);
		return loanInfoPics;
	}

	/**
	 * 
	 * @description 根据loanID获取抵押物图片
	 * @author 孙铮
	 * @time 2014-8-30 上午10:51:37
	 * @param loanID
	 * @return
	 */
	public List<BannerPicture> getLoanGuaranteePics(String loanID) {
		List<BannerPicture> loanGuaranteePics = loanDao
				.getLoanGuaranteePics(loanID);
		return loanGuaranteePics;
	}

	public void update(Loan loan) {
		loanDao.update(loan);
	}

	public void dealRaiseComplete(String loanId)
			throws NoMatchingObjectsException {
		if (calculateMoneyNeedRaised(loanId) <= 0) {
			// 项目募集完成
			Loan loan = get(loanId);
			if (StringUtils.equals(loan.getStatus(),
					LoanConstants.LoanStatus.RAISING)) {
				loan.setStatus(LoanConstants.LoanStatus.RECHECK);
				update(loan);
			}
		}
	}

	public void verifyInvestMoney(String loanId, Double money)
			throws InvestMoneyException {
		Loan loan = this.get(loanId);
		Double investOriginMoney = loan.getInvestOriginMoney();
		Double increaseMoney = loan.getIncreaseMoney();

		if (money < investOriginMoney) {
			throw new InvestMoneyException("投资金额不能小于起点金额");
		}

		if (money % increaseMoney != 0) {
			throw new InvestMoneyException("投资金额与递增金额不符");
		}
	}

	public double calculateMoneyNeedRaised(String loanId) {
		Loan loan = this.get(loanId);
		if (loan == null) {
			return 0;
		}

		// 统计所有的此借款的投资信息，求和做减法，得出尚未募集到的金额。
		double validSumMoney = investDao.getValidInvestSumByLoan(loanId);
		double remain = ArithUtil.sub(loan.getTotalmoney(), validSumMoney);
		return remain < 0 ? 0 : remain;
	}

	/**
	 * 投资进度
	 */
	public double calculateRaiseCompletedRate(String loanId)
			throws NoMatchingObjectsException {
		double remainMoney = calculateMoneyNeedRaised(loanId);
		Loan loan = loanDao.get(loanId);
		double loanMoney = loan.getTotalmoney();
		return ArithUtil.round((loanMoney - remainMoney) / loanMoney * 100, 2);
	}

	/**
	 * 
	 * @description 根据组合条件查询所有借款记录
	 * @author 孙铮
	 * @time 2014-9-1 下午12:02:28
	 * @param invest
	 * @return
	 */
	public List<Invest> getInvestsByGroupCondition(Invest invest) {
		if (invest == null) {
			return null;
		} else {
			List<Invest> invests = loanDao.getInvestsByGroupCondition(invest);
			return invests;
		}
	}

	@Override
	public void insertEnterpriseLoan(ApplyEnterpriseLoan applyEnterpriseLoan) {
		applyEnterpriseLoan.setId(IdGenerator.randomUUID());
		applyEnterpriseLoan.setType("郑州车贷");
		applyEnterpriseLoan
				.setStatus(LoanConstants.ApplyEnterpriseLoanStatus.WAITING_VERIFY);
		applyEnterpriseLoan.setApplyTime(new Date());
		applyEnterpriseLoanDao.insert(applyEnterpriseLoan);
	}

	@Override
	public PageData<Loan> findPaging4Personal(int pageNo, int pageSize,
			Loan loan) {
		return loanDao.findPaging4Personal(pageNo, pageSize, loan);
	}

	@Override
	public Vehicle getVehicleDetail(String loanId) {
		return loanDetailService.getVehicleDetail(loanId);
	}

	@Override
	public House getHouseDetail(String loanId) {
		return loanDetailService.getHouseDetail(loanId);
	}

	@Override
	public Enterprise getEnterpriseDetail(String loanId) {
		return loanDetailService.getEnterpriseDetail(loanId);
	}

	@Override
	public Loan getLoanDetail(Loan loan) {
		String loanId = loan.getId();
		loan = loanDao.get(loanId);
		if (loan != null) {
			String loanType = loan.getLoanType();
			if (StringUtils.equals(loanType, LoanConstants.Type4Loan.VEHICLE)) {
				loan.setVehicle(getVehicleDetail(loanId));
			} else if (StringUtils.equals(loanType,
					LoanConstants.Type4Loan.HOUSE)) {
				loan.setHouse(getHouseDetail(loanId));
			} else if (StringUtils.equals(loanType,
					LoanConstants.Type4Loan.ENTERPRISE)) {
				loan.setEnterprise(getEnterpriseDetail(loanId));
			}

			return loan;
		}
		return null;
	}

	@Override
	public LoanProgress getLoanProgress(String loanType) {
		Double allMoney = loanDetailService.getAllMoney(loanType);
		Double sumMoney = loanDetailService.getSumMoney(loanType);
		Double investMoney = loanDetailService.getInvestMoney(loanType);
		LoanProgress loanProgress = new LoanProgress();
		loanProgress.setAllMoney(allMoney);
		loanProgress.setSumMoney(sumMoney);
		loanProgress.setInvestMoney(investMoney);
		if (sumMoney == 0) {
			loanProgress.setUnderway(false);
		} else {
			loanProgress.setUnderway(true);
		}
		return loanProgress;
	}

	@Override
	public Double getRemainingInvestmentAmount() {
		return loanDetailService.getRemainingInvestmentAmount();
	}

	@Override
	public void dealOverExpectTime(String loanId) {
		if (StringUtils.isBlank(loanId)) {
			log.errLog("项目过期调度", "项目编号不存在");
			return;
		}
		try {
			Loan loan = loanDao.get(loanId);
			log.infoLog("项目过期调度", loanId + ":" + LoanConstants.LoanStatus.DQGS);
			if (isOverExpectTime(loan)) {
				if (LoanConstants.LoanStatus.RAISING.equals(loan.getStatus())) {
					// 只有筹款中的借款，才能通过调度改成等待复核
					// loan.setStatus(LoanConstants.LoanStatus.RECHECK);
				} else if (LoanConstants.LoanStatus.DQGS.equals(loan
						.getStatus())) {
					// 只有贷前公示中的借款，才能通过调度改成筹款中
					loan.setStatus(LoanConstants.LoanStatus.RAISING);
				}
			}
			try {
				loanDao.update(loan);
			} catch (Exception e) {
				log.errLog("项目过期调度", e.getMessage());
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.errLog("项目过期调度", e);
		}
	}

	@Override
	public boolean isOverExpectTime(String loanId) {
		Loan loan = loanDao.get(loanId);
		if (loan == null) {
			return false;
		}

		if (new Date().before(loan.getExpectTime())) {
			return false;
		}
		return true;
	}

	@Override
	public PageInfo<Loan> pageLite(int pageNo, int pageSize, Loan loan) {
		return loanDao.pageLite(pageNo, pageSize, loan);
	}

	@Override
	public boolean isOverExpectTime(Loan loan) {
		if (loan == null) {
			return false;
		}

		if (new Date().before(loan.getExpectTime())) {
			return false;
		}
		return true;
	}

	@Override
	public String findBorrowerMessageByUserId(String param) {
		User user = new User();
		if (StringUtils.isNumeric(param) && StringUtils.length(param) == 11) {
			user.setMobileNumber(param);
		} else if (StringUtils.contains(param, "@")) {
			user.setEmail(param);
		} else {
			user.setUserId(param);
		}
		User verifyLogin = userDao.verifyLogin(user);
		if (verifyLogin == null) {
			return "用户不存在";
		}
		List<String> roles = userDao.getRoles(verifyLogin.getUserId());
		if (roles.isEmpty() || !roles.contains("INVESTOR")) {
			return "该用户未到易宝开户";
		}
		Double balance = userMoneyService.getBalance(verifyLogin.getUserId());
		return "姓名:" + verifyLogin.getRealname() + " 手机号:"
				+ verifyLogin.getMobileNumber() + " 平台帐号:"
				+ verifyLogin.getUserId() + "账户可用余额:" + balance;
	}

	@Override
	public void uploadLoanData(CommonsMultipartFile[] files,
			HttpServletRequest request) {
		String loanId = request.getParameter("loanId");
		String realPath = request.getRealPath("/");
		String mkdir = "";
		String replaceMkdir = mkdir.replaceAll("/", "\\\\");
		// 上传的真实文件名称
		String realName = files[0].getOriginalFilename();
		// 对文件名进行编码
		String newName = "";
		String pdf = realName.substring(realName.indexOf('.'));
		String absPath = realPath + replaceMkdir + "\\" + newName;
		//oss路径
		String osskey = mkdir;
		if(osskey.startsWith("/")){
			osskey = osskey.substring(1) + "/" + newName;
		}
		if (!files[0].isEmpty()) {
			FileOutputStream os = null;
			InputStream in = null;
			try {
				// 拿到输出流，同时重命名上传的文件
				os = new FileOutputStream(absPath);
				// 拿到上传文件的输入流
				in = files[0].getInputStream();			
				// 以写字节的方式写文件
				int b = 0;
				while ((b = in.read()) != -1) {
					os.write(b);
				}
				os.flush();
				OssUtil.putObject(LoadConstantProterties2.getValueByDefaultPro("bucketName"), osskey, absPath, files[0].getContentType());
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				if (os != null && in != null) {
					try {
						os.close();
						in.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
		}
		if (".pdf".equalsIgnoreCase(pdf)) {
			Loan loan = loanDao.get(loanId);
			loan.setContractName(realName);
			loan.setContract(mkdir + "/" + newName);
			loanDao.update(loan);
		} else {
			// 要写入的服务器磁盘路径
			BannerPicture bp = new BannerPicture();
			bp.setId(IdGenerator.randomUUID());
			bp.setTitle(realName);
			bp.setPicture(mkdir + "/" + newName);
			bp.setSeqNum(0);
			this.insertBannerPicture(bp, loanId);
		}
	}

	@Override
	@Transactional(readOnly = false, rollbackFor = Exception.class)
	public void insertBannerPicture(BannerPicture bannerPicture, String loanId) {
		loanDao.insertBannerPicture(bannerPicture);
		loanDao.insertLoanInfoPics(bannerPicture.getId(), loanId);
	}

	@Override
	@Transactional(readOnly = false, rollbackFor = Exception.class)
	public void updateImage(String op, String picId, String loanId) {
		if ("del".equals(op)) {
			BannerPicture bannerPicture = loanDao.getBannerPictureById(picId);
			bannerPicture.setUrl("del");
			loanDao.updateBannerPicture(bannerPicture);
		}
	}

	@Override
	public String cancelByInvestId(String investId) {
		Invest invest = investDao.get(investId);
		String loanId = invest.getLoanId();
		Loan loan = loanDao.get(loanId);
		boolean flag = true;
		HttpClient client = new HttpClient();
		PostMethod postMethod = new PostMethod(
				TrusteeshipYeepayConstants.RequestUrl.RequestDirectUrl);
		StringBuffer content = new StringBuffer();
		content.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
		// 商户编号:商户在易宝唯一标识
		content.append("<request platformNo=\""
				+ TrusteeshipYeepayConstants.Config.MER_CODE + "\">");
		content.append("<platformUserNo>" + invest.getInvestUserID()
				+ "</platformUserNo>");
		content.append("<requestNo>" + invest.getId() + "</requestNo>");
		content.append("</request>");

		// 保存操作信息
		TrusteeshipOperation to = trusteeshipOperationService.get(
				TrusteeshipYeepayConstants.OperationType.INVEST,
				invest.getId(), invest.getId(), "yeepay");
		if (to == null) {
			to = trusteeshipOperationService.get(
					TrusteeshipYeepayConstants.OperationType.AUTOINVEST,
					invest.getId(), invest.getId(), "yeepay");
		}
		to.setStatus(TrusteeshipYeepayConstants.Status.SENDED);
		to.setRequestTime(new Date());
		to.setRequestData(content.toString());
		trusteeshipOperationService.update(to);

		postMethod.setParameter("req", content.toString());
		String sign = CFCASignUtil.sign(content.toString());
		postMethod.setParameter("sign", sign);
		postMethod.setParameter("service", "REVOCATION_TRANSFER");
		// 执行post方法
		try {
			int statusCode = client.executeMethod(postMethod);
			if (statusCode != HttpStatus.SC_OK) {
				log.infoLog("流标失败", "在执行流标时失败,httpStatus错误:" + HttpStatus.SC_OK
						+ postMethod.getStatusLine());
			}
			// 获得返回的结果
			byte[] responseBody = postMethod.getResponseBody();
			// 响应信息
			@SuppressWarnings("unchecked")
			Map<String, String> resultMap = Dom4jUtil.xmltoMap(new String(
					responseBody, "UTF-8"));
			// 返回码
			String code = resultMap.get("code");
			// 描述
			if (code.equals("1")) {// 如果取消投标成功，执行业务逻辑。
				userMoneyService.unfreezeMoney(invest.getInvestUserID(),
						invest.getMoney(),
						"解冻：投资" + loan.getName(), "流标成功，资金解冻");
				// 更改投资状态
				invest.setStatus(InvestConstants.InvestStatus.CANCEL);
				User user = userDao.get(invest.getInvestUserID());
				user.setInvestMoneyTotal(user.getInvestMoneyTotal()
						- invest.getMoney());
				if ("Y".equals(invest.getReturnPond())) {
					user.setInvestMoneyTotal1(user.getInvestMoneyTotal1()
							+ invest.getMoney());
				}
				invest.setReturnPond(null);
				investDao.update(invest);
				userDao.update(user);
			} else {
				flag = false;
			}
			to.setStatus(TrusteeshipConstants.Status.PASSED);
			to.setResponseData(new String(responseBody, "UTF-8"));
			to.setResponseTime(new Date());
			trusteeshipOperationService.update(to);
		} catch (Exception e) {
			log.infoLog(invest.getId() + "流标失败", e);
			e.printStackTrace();
		} finally {
			postMethod.releaseConnection();
		}
		return flag ? "流标成功" : "流标失败";
	}

	@Override
	public void updateImageSeqNum(String picId, String seqNum) {
		BannerPicture bannerPicture = loanDao.getBannerPictureById(picId);
		if (!StringUtils.isBlank(seqNum) || NumberUtils.isNumber(seqNum)) {
			bannerPicture.setSeqNum(Integer.parseInt(seqNum));
		}
		loanDao.updateBannerPicture(bannerPicture);
	}

	@Override
	public List<FixedBorrowers> findAllFixedBorrowers() {
		List<FixedBorrowers> findAllFixedBorrowers = loanDao
				.findAllFixedBorrowers();
		for (FixedBorrowers fixedBorrowers : findAllFixedBorrowers) {
			Double balance = userMoneyService.getBalance(fixedBorrowers
					.getUserId());
			fixedBorrowers.setAvailableBalance(balance);
		}
		return findAllFixedBorrowers;
	}

	@Override
	public void addFixedBorrower(String userId) {
		User user = new User();
		if (StringUtils.isNumeric(userId) && StringUtils.length(userId) == 11) {
			user.setMobileNumber(userId);
		} else if (StringUtils.contains(userId, "@")) {
			user.setEmail(userId);
		} else {
			user.setUserId(userId);
		}
		User verifyLogin = userDao.verifyLogin(user);
		loanDao.insertFixedBorrower(verifyLogin.getUserId());
	}

	@Override
	public void alterFixedBorrowersStatus(String borrower, String status) {
		loanDao.alterFixedBorrowersStatus(borrower, status);
	}

	@Override
	public String updateOrganizationExclusiveStatus(String loanId) {
		if (StringUtils.isBlank(loanId)) {
			return "借款项目id不正确";
		} else {
			Loan loan = loanDao.get(loanId);
			loan.setStatus(LoanConstants.LoanStatus.COMPLETE);
			Invest i = new Invest();
			i.setStatus(InvestConstants.InvestStatus.REPAYING);
			i.setLoanId(loanId);
			List<Invest> invests = investDao.getInvestLoan(i);
			if (invests != null && invests.size() > 0) {
				i = invests.get(0);
				i.setStatus(InvestConstants.InvestStatus.COMPLETE);
			}
			loanDao.update(loan);
			investDao.update(i);
			return "ok";
		}
	}

	@Override
	public double getTotalMoney(Map map) {
		if (loanDao.getTotalMoney(map) == null)
			return 0;
		else
			return loanDao.getTotalMoney(map);
	}

	@Override
	public List<Loan> findLoan(Loan loan) {
		return loanDao.find(loan);
	}

	@Override
	public List<Loan> getLoanForGaveMoneyToBorrower(int days) {
		
		return loanDao.getLoanForGaveMoneyToBorrower(days);
	}

	
}
