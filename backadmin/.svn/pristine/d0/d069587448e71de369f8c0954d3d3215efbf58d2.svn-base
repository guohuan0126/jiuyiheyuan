package com.duanrong.business.yeepay.service.impl;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicHeader;
import org.apache.http.message.BasicNameValuePair;
import org.springframework.stereotype.Service;

import util.Log;
import util.XMLUtil;
import base.exception.InsufficientBalance;

import com.duanrong.business.invest.dao.InvestDao;
import com.duanrong.business.invest.model.Invest;
import com.duanrong.business.invest.service.InvestService;
import com.duanrong.business.loan.model.Loan;
import com.duanrong.business.loan.service.LoanService;
import com.duanrong.business.trusteeship.model.TrusteeshipOperation;
import com.duanrong.business.trusteeship.model.TrusteeshipYeepayConstants;
import com.duanrong.business.trusteeship.service.TrusteeshipOperationService;
import com.duanrong.business.user.dao.RedPacketDao;
import com.duanrong.business.user.model.RedPacket;
import com.duanrong.business.user.service.UserMoneyService;
import com.duanrong.business.yeepay.service.FailLoanService;
import com.duanrong.newadmin.constants.InvestConstants;
import com.duanrong.newadmin.constants.LoanConstants;
import com.duanrong.newadmin.utility.Dom4jUtil;
import com.duanrong.newadmin.utility.GeneratorXML;
import com.duanrong.newadmin.utility.IdGenerator;
import com.duanrong.util.DateUtil;
import com.duanrong.util.client.DRHTTPSClient;
import com.duanrong.yeepaysign.CFCASignUtil;

@Service
public class FailLoanServiceImpl implements FailLoanService {

	@Resource
	InvestDao investDao;
	@Resource
	UserMoneyService userMoneyService;
	@Resource
	InvestService investService;
	@Resource
	LoanService loanService;
	@Resource
	TrusteeshipOperationService trusteeshipOperationService;
	@Resource
	RedPacketDao redPacketDao;
	@Resource
	Log log;

	@Override
	public String failLoan(Invest invest) throws InsufficientBalance {

		//try {
			/*if (DateUtil.calculateIntervalDays(new SimpleDateFormat(
					"yyyy-MM-dd").parse("2016-06-14"), invest.getTime()) > 0) {*/
				//return sendV2(invest);
			//} else {
		return sendV2(invest);
			//}
		/*} catch (ParseException e) {
			e.printStackTrace();
			return "fail";
		}*/
	}

	private String send(Invest invest) throws InsufficientBalance {
		/*********************** XML拼接 ***********************/
		// 参数拼接
		GeneratorXML xml = new GeneratorXML();
		xml.setPlatformNo(TrusteeshipYeepayConstants.Config.MER_CODE);
		xml.setPlatformUserNo(invest.getInvestUserID());
		xml.setRequestNo(invest.getId());
		String content = null;
		try {
			content = XMLUtil.getXML(xml);
		} catch (Exception e) {
			log.errLog("流标XML拼接异常", e);
			throw new InsufficientBalance();
		}
		HttpClient client = new HttpClient();
		/* 创建一个post方法 */
		PostMethod postMethod = new PostMethod(
				TrusteeshipYeepayConstants.RequestUrl.RequestDirectUrl);
		postMethod.setParameter("req", content.toString());
		String sign = CFCASignUtil.sign(content.toString());
		postMethod.setParameter("sign", sign);
		postMethod.setParameter("service", "REVOCATION_TRANSFER");
		/* 执行post方法 */
		int statusCode;
		try {
			statusCode = client.executeMethod(postMethod);
			if (statusCode != HttpStatus.SC_OK) {
				log.infoLog("单项目易宝流标请求响应状态", statusCode + "");
				return "fail";
			}
			/* 获得返回的结果 */
			byte[] responseBody = postMethod.getResponseBody();
			log.infoLog("单项目易宝流标请求返回数据", new String(responseBody, "UTF-8"));
			Map<String, String> respMap = Dom4jUtil.xmltoMap(new String(
					responseBody, "UTF-8"));

			String code = respMap.get("code");
			String description = respMap.get("description");
			/**
			 * 发送前本地保存记录到to表中
			 */
			TrusteeshipOperation to = new TrusteeshipOperation();
			to.setId(IdGenerator.randomUUID());
			to.setMarkId(invest.getId());
			to.setOperator(invest.getInvestUserID());
			to.setRequestUrl(TrusteeshipYeepayConstants.RequestUrl.RequestDirectUrl);
			to.setRequestData(content.toString());
			to.setRequestTime(new Date());
			to.setType(TrusteeshipYeepayConstants.OperationType.UNFREEZE);
			to.setTrusteeship("yeepay");
			to.setResponseData(new String(responseBody, "UTF-8"));
			to.setResponseTime(new Date());

			if (code.equals("1")) {
				userMoneyService.unfreezeMoney(
						invest.getInvestUserID(),
						invest.getMoney(),
						"本地单笔投资流标解冻",
						"解冻:" + invest.getInvestUserID() + "金额:"
								+ invest.getMoney());
				to.setStatus(TrusteeshipYeepayConstants.Status.PASSED);
				trusteeshipOperationService.insert(to);
				String status = investDao.getLoanStatus(invest.getId());
				invest.setStatus(InvestConstants.InvestStatus.CANCEL);
				investService.update(invest);
				if (status.equals(LoanConstants.LoanStatus.RECHECK)) {
					Loan loan = new Loan();
					loan.setId(invest.getLoanId());
					loan.setStatus(LoanConstants.LoanStatus.RAISING);
					loanService.update(loan);
				}
				if (invest.getRedpacketId() > 0) {
					RedPacket redpacket = redPacketDao.get(invest
							.getRedpacketId());
					if (redpacket != null
							&& redpacket.getSendStatus().equals("used")) {
						if (DateUtil.calculateIntervalDays1(new Date(),
								redpacket.getDeadLine()) < 0) {

						} else {
							redpacket.setSendStatus("unused");
						}
						redPacketDao.update(redpacket);
					}
				}
			} else {
				to.setStatus(TrusteeshipYeepayConstants.Status.REFUSED);
				trusteeshipOperationService.insert(to);
				return description;
			}
		} catch (HttpException e) {
			log.errLog("Fatal protocol violation:", e);
			e.printStackTrace();
			return "fail";
		} catch (IOException e) {
			log.errLog("Fatal protocol violation:", e);
			e.printStackTrace();
			return "fail";
		} finally {
			/* Release the connection. */
			postMethod.releaseConnection();
		}
		return "ok";
	}

	private String sendV2(Invest invest) throws InsufficientBalance {

		StringBuffer content = new StringBuffer();
		content.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>");
		// platformNo:商户编号
		content.append("<request platformNo=\""
				+ TrusteeshipYeepayConstants.Config.MER_CODE + "\">");

		content.append("<requestNo>" + invest.getId() + "</requestNo>");
		content.append("<mode>CANCEL</mode>");
		content.append("<notifyUrl>"
				+ TrusteeshipYeepayConstants.ResponseS2SUrl.PRE_RESPONSE_URL
				+ "complete_transaction_invest" + "</notifyUrl>");
		content.append("</request>");
		String xml = content.toString();
		/****************************************************/
		String type = TrusteeshipYeepayConstants.OperationType.INVEST;
		if (invest.getIsAutoInvest() != null && invest.getIsAutoInvest()) {
			type = TrusteeshipYeepayConstants.OperationType.AUTOINVEST;
		}
		String sign = CFCASignUtil.sign(content.toString());
		TrusteeshipOperation to = trusteeshipOperationService.read(type,
				invest.getId(), invest.getId(), "yeepay");
		to.setRequestData(to.getRequestData() + "\nsign=" + sign + ",req="
				+ xml);

		List<NameValuePair> params = new ArrayList<>();
		params.add(new BasicNameValuePair("req", xml));
		params.add(new BasicNameValuePair("sign", sign));
		params.add(new BasicNameValuePair("service", "COMPLETE_TRANSACTION"));
		String responseBody = "";
		try {
			responseBody = DRHTTPSClient.sendHTTPRequestPostToString(
					TrusteeshipYeepayConstants.RequestUrl.RequestDirectUrl,
					new BasicHeader[0], params);
		} catch (IOException e) {
			e.printStackTrace();
			return "fail";
		}

		log.infoLog("单项目易宝流标请求返回数据", responseBody);
		Map<String, String> respMap = Dom4jUtil.xmltoMap(responseBody);
		String code = respMap.get("code");
		to.setResponseData(to.getResponseData() + responseBody);
		if (code.equals("1")) {

			failLoan(invest, to);
		} else {
			to.setStatus(TrusteeshipYeepayConstants.Status.REFUSED);
			trusteeshipOperationService.update(to);
		}
		return "ok";
	}

	public String sendV2(String id){
		StringBuffer content = new StringBuffer();
		content.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>");
		// platformNo:商户编号
		content.append("<request platformNo=\""
				+ TrusteeshipYeepayConstants.Config.MER_CODE + "\">");

		content.append("<requestNo>" + id + "</requestNo>");
		content.append("<mode>CANCEL</mode>");
		content.append("<notifyUrl>"
				+ TrusteeshipYeepayConstants.ResponseS2SUrl.PRE_RESPONSE_URL
				+ "complete_transaction_invest" + "</notifyUrl>");
		content.append("</request>");
		String xml = content.toString();
		/****************************************************/
		String sign = CFCASignUtil.sign(content.toString());
		List<NameValuePair> params = new ArrayList<>();
		params.add(new BasicNameValuePair("req", xml));
		params.add(new BasicNameValuePair("sign", sign));
		params.add(new BasicNameValuePair("service", "COMPLETE_TRANSACTION"));
		try {
			DRHTTPSClient.sendHTTPRequestPostToString(
					TrusteeshipYeepayConstants.RequestUrl.RequestDirectUrl,
					new BasicHeader[0], params);
		} catch (IOException e) {
			return "fail";
		}
		return "ok";
	}

	public void failLoan(Invest invest, TrusteeshipOperation to)
			throws InsufficientBalance {
		Loan loan = loanService.read(invest.getLoanId());
		userMoneyService.unfreezeMoney(invest.getInvestUserID(),
				invest.getMoney(), "解冻：投资" + loan.getName(), "");
		to.setStatus(TrusteeshipYeepayConstants.Status.PASSED);
		String status = investDao.getLoanStatus(invest.getId());
		invest.setStatus(InvestConstants.InvestStatus.CANCEL);
		investService.update(invest);
		if (status.equals(LoanConstants.LoanStatus.RECHECK)) {
			loan.setStatus(LoanConstants.LoanStatus.RAISING);
			loanService.update(loan);
		}
		if (invest.getRedpacketId() > 0) {
			RedPacket redpacket = redPacketDao.get(invest.getRedpacketId());
			if (redpacket != null && redpacket.getSendStatus().equals("used")) {
				if (DateUtil.calculateIntervalDays1(new Date(),
						redpacket.getDeadLine()) < 0) {
				} else {
					redpacket.setSendStatus("unused");
				}
				redPacketDao.update(redpacket);
			}
		}
		to.setStatus("cancel");
		trusteeshipOperationService.update(to);
	}
}
