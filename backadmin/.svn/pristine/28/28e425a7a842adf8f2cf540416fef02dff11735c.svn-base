package com.duanrong.business.ruralfinance.service.imp;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;


import org.springframework.stereotype.Service;
import base.pagehelper.PageInfo;
import com.duanrong.business.demand.dao.DemandTreasureLoanDao;
import com.duanrong.business.demand.model.DemandtreasureLoan;
import com.duanrong.business.ruralfinance.dao.AgricultureLoanerInfoDao;
import com.duanrong.business.ruralfinance.dao.AgricultureRepaymentPlanDao;
import com.duanrong.business.ruralfinance.model.AgricultureForkLoans;
import com.duanrong.business.ruralfinance.model.AgricultureLoaninfo;
import com.duanrong.business.ruralfinance.model.AgricultureRepaymentPlan;
import com.duanrong.business.ruralfinance.model.LoanerinfoExport;
import com.duanrong.business.ruralfinance.model.Template;
import com.duanrong.business.ruralfinance.service.AgricultureLoanerInfoService;
import com.duanrong.newadmin.utility.DateUtil;
import com.duanrong.newadmin.utility.ForkloansCompute;

@Service
public class AgricultureLoanerInfoServiceImpl implements
		AgricultureLoanerInfoService {

	@Resource
	private AgricultureLoanerInfoDao loanerInfoDao;
	@Resource
	private AgricultureRepaymentPlanDao agricultureRepaymentPlanDao;
	@Resource
	private DemandTreasureLoanDao demandTreasureLoandao ;
	@Override
	public PageInfo<AgricultureLoaninfo> readAgricultureLoaninfo(int pageNo,
			int pageSize, Map<String, Object> params) {
		return loanerInfoDao.readAgricultureLoaninfo(pageNo, pageSize, params);
	}

	@Override
	public PageInfo<AgricultureForkLoans> readAgricultureForkLoans(int pageNo,
			int pageSize, Map<String, Object> params) {
		// TODO Auto-generated method stub
		return loanerInfoDao.readAgricultureForkLoans(pageNo, pageSize, params);
	}

	@Override
	public PageInfo<AgricultureRepaymentPlan> readRuralfinanceRepaymentPlan(
			int pageNo, int pageSize, Map<String, Object> params) {
		PageInfo<AgricultureRepaymentPlan> page = loanerInfoDao
				.readRuralfinanceRepaymentPlan(pageNo, pageSize, params);
		// TODO Auto-generated method stub
		return page;
	}

	@Override
	public AgricultureLoaninfo readAgricultureLoaninfoById(String id) {
		// TODO Auto-generated method stub
		return loanerInfoDao.readAgricultureLoaninfoById(id);
	}

	@Override
	public void updateStatusById(Map<String, Object> params) {
		loanerInfoDao.updateStatusById(params);

	}

	@Override
	public PageInfo<AgricultureForkLoans> readAgricultureForkLoansById(
			int pageNo, int pageSize, String id) {
		// TODO Auto-generated method stub
		return loanerInfoDao.readAgricultureForkLoansById(pageNo, pageSize, id);
	}

	@Override
	public void updateForkStatusById(Map<String, Object> params) {
		loanerInfoDao.updateForkStatusById(params);

	}

	@Override
	public void renewalLatePenalty(Map<String, Object> map) {
		loanerInfoDao.renewalLatePenalty(map);

	}

	@Override
	public void updateRepaymentplanStatus(Map<String, Object> params) {
		loanerInfoDao.updateRepaymentplanStatus(params);

	}

	@Override
	public AgricultureLoaninfo readAgricultureLoaninfoByIdAndFlag(String id) {
		// TODO Auto-generated method stub
		return loanerInfoDao.readAgricultureLoaninfoByIdAndFlag(id);
	}

	@Override
	public double readneedRepayMoney(String loanDataId) {
		// TODO Auto-generated method stub
		return loanerInfoDao.readneedRepayMoney(loanDataId);
	}

	@Override
	public List<AgricultureRepaymentPlan> readRuralfinanceFailRepaymentPlan() {
		// TODO Auto-generated method stub
		return loanerInfoDao.readRuralfinanceFailRepaymentPlan();
	}

	@Override
	public void updateFlag(Map<String, Object> map) {
		loanerInfoDao.updateFlag(map);

	}

	@Override
	public List<Template> readTemplate(Map<String, Object> params) {
		// TODO Auto-generated method stub
		return loanerInfoDao.readTemplate(params);
	}

	@Override
	public List<LoanerinfoExport> readLoanerinfoExport() {
		return loanerInfoDao.readLoanerinfoExport();
	}

	@Override
	public List<AgricultureLoaninfo> readAgricultureLoaninfo(
			Map<String, Object> params) {
		// TODO Auto-generated method stub
		return loanerInfoDao.readAgricultureLoaninfo(params);
	}

	@Override
	public List<AgricultureRepaymentPlan> readRuralfinanceRepaymentPlan(
			Map<String, Object> params) {

		return loanerInfoDao.readRuralfinanceRepaymentPlan(params);
	}

	@Override
	public List<AgricultureLoaninfo> readAgriculturePacking(
			Map<String, Object> params) {
		return loanerInfoDao.readAgriculturePacking(params);
	}

	@Override
	public AgricultureLoaninfo readAgricultureByLoanerinfoId(String id) {

		return loanerInfoDao.readAgricultureByLoanerinfoId(id);
	}

	@Override
	public void updatePackStatus(Map<String, Object> params) {
		loanerInfoDao.updatePackStatus(params);
	}

	@Override
	public void updateTimelyLoaninfo(Map<String, Object> params) {
		loanerInfoDao.updateTimelyLoaninfo(params);

	}

	@Override
	public List<AgricultureRepaymentPlan> readTimelyloansRepaymentPlan(String id) {

		return loanerInfoDao.readTimelyloansRepaymentPlan(id);
	}

	@Override
	public AgricultureLoaninfo readAgricultureBycontractId(
			Map<String, Object> params) {
		// TODO Auto-generated method stub
		return loanerInfoDao.readAgricultureBycontractId(params);
	}

	@Override
	public void updateLoaninfobank(Map<String, Object> params) {
		loanerInfoDao.updateLoaninfobank(params);

	}

	@Override
	public AgricultureRepaymentPlan readRepaymentPlanById(String id) {

		return loanerInfoDao.readRepaymentPlanById(id);
	}

	@Override
	public List<AgricultureForkLoans> readAgricultureForkLoans(
			Map<String, Object> params) {
		return loanerInfoDao.readAgricultureForkLoans(params);
	}

	@Override
	public boolean editLeekPrepayment(String contractId, String loanTerm,
			String settle) {
		try {
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
			List<AgricultureRepaymentPlan> repaymentlist = new ArrayList<>();
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("id", contractId);
			List<AgricultureRepaymentPlan> planList = loanerInfoDao
					.readRuralfinanceRepaymentPlan(params);
			if (planList != null && planList.size() > 0) {
				Date endtime = DateUtil.addMonth(
						planList.get(0).getRepayDate(),
						Integer.parseInt(loanTerm) - 1);
				String nowDate = df.format(new Date());
				String parentDate = df.format(endtime);
				double shengyu = 0.0;
				// 要结束的还款时间要大于当前时间
				if (DateUtil.dayDifference(nowDate, parentDate) > 0) {
					for (int i = 0; i < planList.size(); i++) {
						if (i + 1 == Integer.parseInt(loanTerm)) {
							AgricultureRepaymentPlan repaymentPlan = new AgricultureRepaymentPlan();
							double corpus = planList.get(i).getCorpus();
							shengyu += corpus;// 前n期的本金和
							// 如果线下已经还清处理还款计划和还款数据
							if ("是".equals(settle)) {
								repaymentPlan.setOperationTime(endtime);
								repaymentPlan.setRepayStatus("finish");
								if (i + 1 == planList.size()) {
									repaymentPlan.setMonthMoney(planList.get(i)
											.getMonthMoney());
									repaymentPlan.setCorpus(planList.get(i)
											.getCorpus());
									repaymentPlan.setRealrepayMoney(planList
											.get(i).getMonthMoney());
								} else {
									repaymentPlan
											.setMonthMoney(ForkloansCompute
													.round(planList.get(i)
															.getMonthMoney()
															+ (planList.get(i)
																	.getMoney() - shengyu),
															2));
									repaymentPlan
											.setCorpus(ForkloansCompute
													.round(planList.get(i)
															.getCorpus()
															+ (planList.get(i)
																	.getMoney() - shengyu),
															2));
									repaymentPlan
											.setRealrepayMoney(ForkloansCompute
													.round(planList.get(i)
															.getMonthMoney()
															+ (planList.get(i)
																	.getMoney() - shengyu),
															2));
								}
								repaymentPlan.setIntereat(planList.get(i)
										.getIntereat());
								repaymentPlan.setLatePenalty(planList.get(i)
										.getLatePenalty());
							} else {
								// 如果没有还清走中金的扣款流程，处理还款计划和还款数据
								// repaymentPlan.setOperationTime(endtime);
								if (i + 1 == planList.size()) {
									repaymentPlan.setMonthMoney(planList.get(i)
											.getMonthMoney());
									repaymentPlan.setCorpus(planList.get(i)
											.getCorpus());
								} else {
									repaymentPlan
											.setMonthMoney(ForkloansCompute
													.round(planList.get(i)
															.getMonthMoney()
															+ (planList.get(i)
																	.getMoney() - shengyu),
															2));
									repaymentPlan
											.setCorpus(ForkloansCompute
													.round(planList.get(i)
															.getCorpus()
															+ (planList.get(i)
																	.getMoney() - shengyu),
															2));
								}
								repaymentPlan.setIntereat(planList.get(i)
										.getIntereat());
								repaymentPlan.setRealrepayMoney(planList.get(i)
										.getRealrepayMoney());
								repaymentPlan.setLatePenalty(planList.get(i)
										.getLatePenalty());
							}
							repaymentPlan.setId(planList.get(i).getId());
							agricultureRepaymentPlanDao
									.updateTimlyRepaymentplan(repaymentPlan);
						} else if (i + 1 > Integer.parseInt(loanTerm)) {
							AgricultureRepaymentPlan repaymentPlan1 = new AgricultureRepaymentPlan();
							repaymentPlan1.setId(planList.get(i).getId());
							repaymentPlan1.setOperationTime(endtime);
							repaymentPlan1.setMonthMoney(0);
							repaymentPlan1.setCorpus(0);
							repaymentPlan1.setIntereat(0);
							repaymentPlan1.setLatePenalty(0);
							repaymentPlan1.setRealrepayMoney(0);
							repaymentPlan1.setRepayStatus("finish");
							agricultureRepaymentPlanDao
									.updateTimlyRepaymentplan(repaymentPlan1);
						}
					}
					// 2.更新主标借款信息的还款信息
					Map<String, Object> loanerinfoprm = new HashMap<>();
					loanerinfoprm.put("contractId", contractId);
					loanerinfoprm.put("whetherEarlyRepayment", "1");
					loanerinfoprm.put("actualLoanTerm", loanTerm);
					loanerinfoprm.put("actualEndTime", endtime);
					if ("是".equals(settle)) {
						loanerinfoprm.put("status", "finish");
					}
					loanerInfoDao.updateTimelyLoaninfo(loanerinfoprm);
					// 3.修改线上的项目结束时间
					// 根据合同编号查询所有的子标信息，循环子标，并判断子标id是否在活期宝资产中存在，存在并且项目没有结束的更改项目结束日期
					Map<String, Object> ForkLoansParam = new HashMap<>();
					ForkLoansParam.put("contractId", contractId);
					List<AgricultureForkLoans> ForkLoansList = loanerInfoDao
							.readAgricultureForkLoans(ForkLoansParam);
					for (int j = 0; j < ForkLoansList.size(); j++) {
						String forkId = ForkLoansList.get(j).getId();
						DemandtreasureLoan demand = demandTreasureLoandao
								.readByForkId(forkId);
						if (demand != null) {
							Map<String, Object> demandTimePara = new HashMap<>();
							demandTimePara.put("forkId", forkId);
							demandTimePara.put("finishTime", endtime);
							demandTreasureLoandao
									.updatedemandFinishTime(demandTimePara);
						}
					}
				  return true;
				}
			}			
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		return false;
	}

}
